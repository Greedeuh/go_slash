use diesel::PgConnection;
use go_web::models::users::Capability;
use rocket::async_test;
use rocket::futures::FutureExt;
mod utils;
use rocket::http::{Cookie, Header, Status};
use rocket::tokio::sync::Mutex;
use serde_json::json;
use std::default::Default;
use thirtyfour::prelude::*;
use utils::*;

use go_web::guards::SESSION_COOKIE;

#[async_test]
async fn features_should_list_editable_features() {
    in_browser(
        "",
        |driver: &WebDriver, _con: Mutex<PgConnection>, port: u16| {
            async move {
                driver
                    .get(host(port, "/go/settings"))
                    .await?;

                let features = driver.find_elements(By::Css("[role='article']")).await?;

                assert!(!features.is_empty());

                for feature in features {
                    let switch = feature.find_element(By::Css("[role='switch']")).await?;
                    assert_eq!(
                        switch.get_property("checked").await?,
                        Some("false".to_owned())
                    );
                    // switch.click().await?;
                    // assert_eq!(
                    //     switch.get_property("checked").await?,
                    //     Some("true".to_owned())
                    // );
                }

                driver
                    .get(host(port, "/go/settings"))
                    .await?;

                // TODO re-use when having another feature
                // let features = driver
                //     .find_elements(By::Css("[role='article']"))
                //     .await
                //     ?;

                // assert!(!features.is_empty());

                // for feature in features {
                //     assert_eq!(feature.text().await?, "simple");
                //     let switch = feature
                //         .find_element(By::Css("[role='switch']"))
                //         .await
                //         ?;
                //     assert_eq!(
                //         switch.get_property("checked").await?,
                //         Some("true".to_owned())
                //     );
                // }

                Ok(())
            }
            .boxed()
        },
    )
    .await;
}

#[test]
fn should_be_logged_in_to_manage_features() {
    let (client, mut conn) = launch_with("some_session_id: some_mail@mail.com");

    assert_eq!(
        client.get("/go/settings").dispatch().status(),
        Status::Unauthorized
    );
    assert_eq!(
        client
            .patch("/go/settings")
            .json(&json!({ "login": null }))
            .dispatch()
            .status(),
        Status::Unauthorized
    );
}

#[test]
fn should_be_logged_in_to_manage_features_ok_with_auth() {
    let (client, mut conn) = launch_with("some_session_id: some_mail@mail.com");
    user(
        "some_mail@mail.com",
        "pwd",
        &[],
        &[Capability::Features],
        &mut conn,
    );

    assert_ne!(
        client
            .get("/go/settings")
            .cookie(Cookie::new(SESSION_COOKIE, "some_session_id"))
            .dispatch()
            .status(),
        Status::Unauthorized
    );
    assert_ne!(
        client
            .get("/go/settings")
            .header(Header::new("Authorization", "some_session_id"))
            .dispatch()
            .status(),
        Status::Unauthorized
    );

    assert_ne!(
        client
            .patch("/go/settings")
            .cookie(Cookie::new(SESSION_COOKIE, "some_session_id"))
            .dispatch()
            .status(),
        Status::Unauthorized
    );
    assert_ne!(
        client
            .patch("/go/settings")
            .header(Header::new("Authorization", "some_session_id"))
            .dispatch()
            .status(),
        Status::Unauthorized
    );
}
